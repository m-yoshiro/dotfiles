"--------------------
" Plugin settings
"--------------------

" ---------------
" open-browser
" ---------------
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"------------------------------------
" powerline
"------------------------------------
set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

"------------------------------------
" vim-indent-guides
"------------------------------------
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_color_change_percent = 30
let g:indent_guides_guide_size=1
let g:indent_guides_exclude_filetypes = ['help', 'vimfiler',  'unite']

"------------------------------------
" vim-trailing-whitespace
"------------------------------------
  " uniteでスペースが表示されるので、設定でOFFにします。
  let g:extra_whitespace_ignored_filetypes = ['unite', 'vimfiler']


"------------------------------------
" toggle.vim
"------------------------------------
imap <C-A> <Plug>ToggleI
nmap <C-A> <Plug>ToggleN
vmap <C-A> <Plug>ToggleV

let g:toggle_pairs = { 'and':'or', 'or':'and', 'if':'unless', 'unless':'if', 'yes':'no', 'no':'yes', 'enable':'disable', 'disable':'enable', 'pick':'reword', 'reword':'fixup', 'fixup':'squash', 'squash':'edit', 'edit':'exec', 'exec':'pick' }


" ---------------
" quickrun.vim
" ---------------

let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
    \ 'runner'    : 'vimproc',
    \ 'runner/vimproc/updatetime' : 60,
    \ 'outputter' : 'error',
    \ 'outputter/error/success' : 'buffer',
    \ 'outputter/error/error'   : 'quickfix',
    \ 'outputter/buffer/split'  : ':rightbelow 8sp',
    \ 'outputter/buffer/close_on_empty' : 1,
    \ }

"<C-c> で実行を強制終了
" quickrun.vim が実行してない場合は<C-c>を呼び出す
au FileType qf nnoremap <silent><buffer>q :quit<CR>
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

" ---------------
" unite.vim
" ---------------
nnoremap   [unite]   <Nop>
nmap    <Leader>u [unite]

nnoremap [unite]u  :<C-u>Unite -no-split -no-resize -start-insert<Space>

let g:unite_source_history_yank_enable=1
let g:unite_source_file_mru_limit=200
let g:unite_source_rec_async_command='pt --nocolor --nogroup -g .'
let g:unite_source_rec_max_cache_files=5000
call unite#custom#source(
      \ 'buffer,file_rec/async,file_rec', 'matchers',
      \ ['converter_tail', 'matcher_default'])
call unite#custom#source(
      \ 'file_rec/async,file_rec', 'converters',
      \ ['converter_file_directory'])

"全部のせ
nnoremap <silent> [unite]a :<C-u>UniteWithCurrentDir -no-split -no-resize -start-insert -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f :<C-u>Unite -no-split -no-resize -start-insert -buffer-name=files file<CR>
" バッファー一覧
nnoremap <silent> [unite]b :<C-u>Unite -no-split -no-resize -start-insert buffer<CR>
" 常用セット
nnoremap <silent> [unite]u :<C-u>Unite -no-split -no-resize -start-insert buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m :<C-u>Unite -no-split -no-resize -start-insert file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d :<C-u>UniteWithBufferDir -no-split -no-resize -start-insert file<CR>
" file_recしたディレクトリを表示
nnoremap <silent> [unite]r :<C-u>Unite -start-insert file_rec/async:!<CR>
" 検索行を一覧
nnoremap <silent> [unite]; :<C-u>Unite line<CR>
" ヤンクヒストリ一覧
nnoremap <silent> [unite]y :<C-u>Unite historyhistory/yank<CR>

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

call unite#custom_default_action('source/bookmark/directory' , 'vimfiler')

" grep検索
nnoremap <silent> <Leader>g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" ディレクトリを指定してgrep
nnoremap <silent> <Leader>dg :<C-u>Unite grep -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
" nnoremap <silent> <Leader>r :<C-u>UniteResume search-buffer<CR>
" Bookmarkを開く
nnoremap <silent> <Leader><Leader>b :<C-u>Unite bookmark<CR>
" Bookmark追加
nnoremap <silent> <Leader><Leader>B :<C-u>UniteBookmarkAdd<CR>

let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
let g:unite_source_grep_max_candidates = 200

" unite grepにpt を使う
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif

" snippet一覧
" nnoremap <silent> [unite]s :<C-u>Unite snippet<CR>

" ---------------
" vimfiler.vim
" ---------------
nnoremap [vimfiler] <Nop>
nmap <Leader>f [vimfiler]

"IDE風
noremap <silent> [vimfiler]t :<C-u>VimFilerBufferDir -winwidth=35 -split -no-quit -simple -toggle<CR>

"デフォルトのfilerに設定
let g:vimfiler_as_default_explorer = 1
"セーフモード無効で起動
let g:vimfiler_safe_mode_by_default = 0
" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = '⋮'
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

" 現在のディレクトリ
nnoremap <silent> [vimfiler]e :<C-u>VimFilerBufferDir -quit<CR>

"vimfiler上でのキーマッピング
augroup vimfiller_setting
  autocmd!
  autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END
function! s:vimfiler_my_settings()
  nmap <buffer> q <Plug>(vimfiler_exit)
  nmap <buffer> Q <Plug>(vimfiler_hide)
  nnoremap <buffer> <C-r> <Plug>(vimfiler_redraw_screen)
  nmap <buffer> <C-q> <Plug>(vimfiler_quick_look)
  nmap <buffer> <C-w> <Plug>(vimfiler_switch_to_history_directory)
  setlocal nonumber
endfunction

" ---------------
" Gundo.vim
" ---------------
nnoremap <F5> :GundoToggle<CR>

" ---------------
" vim-markdown
" ---------------

augroup MyMarkdown
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " mlでlist-item追加
  autocmd FileType markdown nnoremap <buffer> ml <C-u>for i in range(v:count1) \| call append(line('.'), '*') \| endfor<CR>
augroup END
