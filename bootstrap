#!/usr/bin/env bash

DOTFILES_ROOT=$(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd -P)

# コマンドがエラーを返しば場合、スクリプトの実行を停止する
set -e
# 未定義の変数参照をエラーとみなす
set -o nounset
# パイプライン内のコマンドが失敗した場合、そのパイプライン全体が失敗したとみなす
set -o pipefail

# Trap errors and invoke error handler with line number
trap 'error "An unexpected error occurred" "$LINENO"' ERR

# ----------------------
# Config
# ----------------------

TARGET="all"

# ----------------------
# Logging
# ----------------------

WHITE=$'\e[1;37m'
RED=$'\e[1;31m'
GREEN=$'\e[1;32m'
GRAY=$'\e[0;37m'
PURPLE=$'\e[1;34m'

BOLD="\033[4;37m"
RESET="\033[0m"

_alert () {
  local _color
  local _label
  local _alertType="${1}"
  local _message="${2}"
  local _line="${3:-}" # Optional line number

  if [[ "${_alertType}" == "error" ]]; then
    _color="${RED}"
    _label="ERROR"
  elif [[ "${_alertType}" == "header" ]]; then
    _color="${BOLD}${WHITE}"
    _label="*"
  elif [[ "${_alertType}" == "info" ]]; then
    _color="${GRAY}"
    _label="INFO"
  elif [[ "${_alertType}" == "success" ]]; then
    _color="${GREEN}"
    _label="SUCCESS"
  elif [[ "${_alertType}" == "dryrun" ]]; then
    _color="${PURPLE}"
    _label="DRYRUN"
  fi

  printf "\n${_color}[${_label}] %s${RESET}\n" "$_message"
}

error() {
  local _message="$1"
  local _line="${2:-$LINENO}"
  _alert error "${_message} (at line ${_line})"
  exit 1
}
header () { _alert header "$1"; }
info () { _alert info "$1"; }
success () { _alert success "$1"; }

# ----------------------
# Parse options
# ----------------------

parse_args () {
  while [[ "$#" -gt 0 ]]; do
    case $1 in
      --target)
        TARGET=$2
        shift
        ;;
      *)
        echo "Invalid option: $1" >&2
        ;;
    esac
    shift
  done
}

# ----------------------
# Install tools
# ----------------------

install_homebrew() {
  header "Setup Homebrew..."
  # install homebrew
  if hash brew 2>/dev/null; then
    info "Homebrew is already installed"
  else
    info "Installing Homebrew..."

    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    success 'Homebrew'
  fi
}

install_packages_via_homebrew() {
  header "Installing packages via Homebrew..."

  if ! command -v brew >/dev/null 2>&1; then
    info "brew command could not be found"
    exit
  fi

  if [ ! -f "$DOTFILES_ROOT/brew/Brewfile" ]; then
    error '.Brewfile was not found.'
  fi

  if [ ! -L "$HOME/.Brewfile" ]; then
    ln -s "$DOTFILES_ROOT/brew/Brewfile" "$HOME/.Brewfile"
  fi

  HOMEBREW_BUNDLE_MAS_SKIP=$(brew bundle list --global --mas)
  export HOMEBREW_BUNDLE_MAS_SKIP
  brew bundle install --global || true

  wait
  success 'Packages Installation by Homebrew'
}

install_tool_version_manager() {
  header "Setup tool version manager..."
  info "Trying to install mise..."
  if hash mise 2>/dev/null; then
    info "mise is already installed"
  else
    info "Installing mise..."

    if ! curl https://mise.run | sh; then
      error "Failed to install mise"
    fi

    if hash mise 2>/dev/null; then
      mise --version
    elif [ -f ~/.local/bin/mise ]; then
        ~/.local/bin/mise --version
    else
      error "mise was installed but cannot be found in PATH"
    fi

    success 'Tool version manager'
  fi
}

set_default_shell() {
  if [[ $(basename "$SHELL") != "zsh" ]] && [[ "$(uname -m)" = "x86_64" ]]; then
    if [[ "$SHELL" != "/usr/local/bin/zsh" ]]; then
      sudo bash -c 'echo "/usr/local/bin/zsh" >> /etc/shells'
      sudo chsh -s /usr/local/bin/zsh
    fi
    success 'Setup default shell'
  fi
}

# ----------------------
# Set symlinks
# ----------------------

create_symlinks() {
  header "Create symlinks..."

  local backup_dir
  backup_dir="$HOME/.dotfiles_backup_$(date +%Y%m%d%H%M%S)"
  mkdir -p "$backup_dir"

  for file in .??*
  do
    # Skip unnecessary files
    [ "$file" = ".DS_Store" ] && continue
    [ "$file" = ".gitignore" ] && continue
    [ "$file" = ".git" ] && continue
    [ "$file" = ".github" ] && continue
    [[ $file == .vimrc.* ]] && continue

    local src="$DOTFILES_ROOT/$file"
    local dst="$HOME/$file"

    if [[ -e "$dst" && ! -L "$dst" ]]; then
      info "Backing up existing $dst to $backup_dir"
      mv "$dst" "$backup_dir/"
    fi

    if [[ -L "$dst" ]]; then
      info "Symlink for $dst already exists."
      continue
    fi

    ln -s "$src" "$dst"
    success "linked $src to $dst"
  done

  success 'Symlinks'
}

# ----------------------
# Main
# ----------------------

parse_args "$@"

if [[ $TARGET == "all" ]]; then
  install_homebrew
  install_packages_via_homebrew

  set_default_shell

  create_symlinks

  success 'Bootstrap'
fi
