" ==========================
" Plugin settings
" ==========================

augroup MyAutoCmd
  autocmd!
augroup END

" ---------------
" open-browser
" ---------------
if dein#tap('open-browser.vim') "{{{
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/open-browser.vim'
endif "}}}


"------------------------------------
" lightline
"------------------------------------
if dein#tap('lightline.vim') "{{{
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/lightline.vim'
endif "}}}


"------------------------------------
" vim-indent-guides
"------------------------------------
if dein#tap('Yggdroot/indentLine') "{{{
  " Vim
  let g:indentLine_color_term = 4
  "GVim
  let g:indentLine_color_gui = '#191b5e'
  " none X terminal
  let g:indentLine_color_tty_light = 7 " (default: 4)
  let g:indentLine_color_dark = 1 " (default: 2)

  let g:indentLine_enabled = 1
  let g:indentLine_loaded = 1
endif "}}}

"------------------------------------
" vim-trailing-whitespace
"------------------------------------
if dein#tap('vim-trailing-whitespace.vim') "{{{
  " uniteでスペースが表示されるので、設定でOFFにします。
  let g:extra_whitespace_ignored_filetypes = ['unite', 'vimfiler']
endif "}}}

"------------------------------------
" Helpを日本語化
"------------------------------------
set helplang& helplang=ja,en

"------------------------------------
" toggle.vim
"------------------------------------
if dein#tap('toggle.vim') "{{{
  imap <C-A> <Plug>ToggleI
  nmap <C-A> <Plug>ToggleN
  vmap <C-A> <Plug>ToggleV

  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/toggle.vim'
endif "}}}


" ---------------
" unite.vim
" ---------------
if dein#tap('unite.vim') "{{{
  nnoremap   [unite]   <Nop>
  nmap    <Leader>u [unite]

  nnoremap [unite]u  :<C-u>Unite -no-split -no-resize -start-insert<Space>

  "全部のせ
  nnoremap <silent> [unite]a :<C-u>UniteWithCurrentDir -no-split -no-resize -start-insert -buffer-name=files buffer file_mru bookmark file<CR>
  " ファイル一覧
  nnoremap <silent> [unite]f :<C-u>Unite -no-split -no-resize -start-insert -buffer-name=files file<CR>
  " バッファー一覧
  nnoremap <silent> [unite]b :<C-u>Unite -no-split -no-resize -start-insert buffer<CR>
  " 常用セット
  nnoremap <silent> [unite]u :<C-u>Unite -no-split -no-resize -start-insert buffer file_mru<CR>
  " 最近使用したファイル一覧
  nnoremap <silent> [unite]m :<C-u>Unite -no-split -no-resize -start-insert file_mru<CR>
  " 現在のバッファのカレントディレクトリからファイル一覧
  nnoremap <silent> [unite]d :<C-u>UniteWithBufferDir -no-split -no-resize -start-insert file<CR>
  " file_recしたディレクトリを表示
  nnoremap <silent> [unite]r :<C-u>Unite -start-insert file_rec/async:!<CR>
  " 検索行を一覧
  nnoremap <silent> [unite]; :<C-u>Unite line<CR>
  " ヤンクヒストリ一覧
  nnoremap <silent> [unite]y :<C-u>Unite history/yank<CR>
  " ヘルプをuniteで表示
  nnoremap <silent> [unite]h :<C-u>Unite -no-split -buffer-name=help help<CR>
  " テキスト、ソースをoutline表示
  nnoremap <silent> [unite]o :<C-u>Unite -no-split -no-resize outline<CR>

  augroup unite_settings
    autocmd!
    autocmd FileType unite call s:unite_my_settings()
  augroup END

  function! s:unite_my_settings() abort

    " ESCキーを2回押すと終了する
    nmap <buffer> <ESC> <Plug>(unite_exit)
    nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
    imap <buffer> jj <Plug>(unite_insert_leave)
    nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
    let g:unite_enable_start_insert = 1

    " ウィンドウを分割して開く
    nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')

    " ウィンドウを縦に分割して開く
    nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
  endfunction

  " grep検索
  nnoremap <silent> <Leader>g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  " ディレクトリを指定してgrep
  nnoremap <silent> <Leader>dg :<C-u>Unite grep -buffer-name=search-buffer<CR>
  " カーソル位置の単語をgrep検索
  nnoremap <silent> <Leader>cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
  " grep検索結果の再呼出
  nnoremap <silent> <Leader>r :<C-u>UniteResume search-buffer<CR>
  " Bookmarkを開く
  nnoremap <silent> <Leader><Leader>b :<C-u>Unite bookmark<CR>
  " Bookmark追加
  nnoremap <silent> <Leader><Leader>B :<C-u>UniteBookmarkAdd<CR>

  autocmd MyAutoCmd User dein#source#unite.vim
        \ source ~/dotfiles/vim/plugin/unite.vim
endif "}}}


" ---------------
" vimfiler.vim
" ---------------
if dein#tap('vimfiler.vim') "{{{
  nnoremap [vimfiler] <Nop>
  nmap <Leader>f [vimfiler]

  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/vimfiler.vim'
endif "}}}


" ---------------
" Gundo.vim
" ---------------
if dein#tap('gundo.vim') "{{{
  nnoremap <F5> :GundoToggle<CR>
endif "}}}

" ---------------
" vim-markdown
" ---------------
if dein#tap('vim-markdown.vim') "{{{
  augroup MyMarkdown
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    " mlでlist-item追加
    autocmd FileType markdown nnoremap <buffer> ml <C-u>for i in range(v:count1) \| call append(line('.'), '*') \| endfor<CR>
  augroup END
endif "}}}


" ---------------
" quickrun.vim
" ---------------

if dein#tap('quickrun.vim') "{{{
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/quickrun.vim'

  " quickrun.vim が実行してない場合は<C-c>を呼び出す
  augroup quickrunSettings
    autocmd!
    autocmd FileType qf nnoremap <silent><buffer>q :quit<CR>
  augroup END
  let g:quickrun_no_default_key_mappings = 1
  nmap <Leader>r <Plug>(quickrun)
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
endif "}}}

" ---------------
" syntastic
" ---------------
" if dein#tap('syntastic.vim') "{{{
"   execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
"         \ 'source ~/dotfiles/vim/plugin/syntastic.vim'
" endif "}}}

" ---------------
" neomake
" ---------------
autocmd! BufWritePost,BufEnter * Neomake
if dein#tap('neomake.vim') "{{{
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/neomake.vim'
endif "}}}

" ---------------
" VimCSS3Syntax
" ---------------
if dein#tap('vim-css3-syntax.vim') "{{{
  augroup VimCSS3Syntax
    autocmd!
    autocmd FileType css setlocal iskeyword+=-
  augroup END
endif "}}}


" ---------------
" Sass-compile
" ---------------
if dein#tap('sass-compile.vim') "{{{
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/sass-compile.vim'
endif "}}}


" ---------------
" vim-easy-align
" ---------------
if dein#tap('vim-easy-align.vim') "{{{
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
endif "}}}


" ---------------
" vim-jade
" ---------------
augroup vimJadeSetting
  autocmd!
  autocmd BufNewFile,BufRead *.jade  setf jade
  autocmd BufNew
augroup END

if dein#tap('vim-jade.vim') "{{{
  let g:quickrun_config['jade']={'command': 'jade', 'cmdopt': '-P', 'exec': ['%c &o < %s']}
endif "}}}

" ---------------
" vim-easy-align
" ---------------
if dein#tap('vim-processing.vim') "{{{
  let g:processing_fold = 1
endif "}}}

" ---------------
" vim-slim
" ---------------
if dein#tap('vim-slim.vim') "{{{
endif "}}}
autocmd BufNewFile,BufRead *.slim set ft=slim

"------------------------------------
" Completion
"------------------------------------

if dein#tap('deoplete.nvim') && has('nvim') "{{{
  let g:loaded_neocomplete = 1
  let g:deoplete#enable_at_startup = 1
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/deoplete.vim'
endif "}}}

if dein#tap('neocomplete.vim') && has('lua') "{{{
  let g:loaded_deoplete = 1
  let g:neocomplete#enable_at_startup = 1
  autocmd MyAutoCmd User dein#source#neocomplete.vim
        \ source ~/dotfiles/vim/plugin/neocomplete.vim
endif "}}}

if dein#tap('neosnippet.vim') "{{{
  autocmd MyAutoCmd User dein#source#neosnippet.vim
        \ source ~/dotfiles/vim/plugin/neosnippet.vim
endif "}}}

let g:user_emmet_leader_key = '<C-e>'
if dein#tap('emmet.vim') "{{{
  " let g:user_emmet_install_global = 0
  " autocmd FileType html,jade,css,scss EmmetInstall
  autocmd MyAutoCmd User dein#source#emmet.vim
        \ source ~/dotfiles/vim/plugin/emmet.vim
endif "}}}

" tern
if dein#tap('tern_for_vim') "{{{
  let g:tern_show_argument_hints = 'on_hold'
  let g:tern_show_signature_in_pum = 1
  autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
  autocmd FileType javascript setlocal omnifunc=tern#Complete
endif
