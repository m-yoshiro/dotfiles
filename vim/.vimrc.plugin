scriptencoding utf-8

" ==========================
" Plugin settings
" ==========================

augroup MyAutoCmd
  autocmd!
augroup END

"------------------------------------
" vim-indent-guides
"------------------------------------
if dein#tap('Yggdroot/indentLine') "{{{
  " Vim
  let g:indentLine_color_term = 4
  "GVim
  let g:indentLine_color_gui = '#191b5e'
  " none X terminal
  let g:indentLine_color_tty_light = 7 " (default: 4)
  let g:indentLine_color_dark = 1 " (default: 2)

  let g:indentLine_enabled = 1
  let g:indentLine_loaded = 1
endif "}}}

"------------------------------------
" vim-trailing-whitespace
"------------------------------------
if dein#tap('vim-trailing-whitespace.vim') "{{{
  " uniteでスペースが表示されるので、設定でOFFにします。
  let g:extra_whitespace_ignored_filetypes = ['unite', 'vimfiler']
endif "}}}

"------------------------------------
" Helpを日本語化
"------------------------------------
set helplang& helplang=ja,en

"------------------------------------
" toggle.vim
"------------------------------------
imap <C-A> <Plug>ToggleI
nmap <C-A> <Plug>ToggleN
vmap <C-A> <Plug>ToggleV

" ---------------
" unite.vim
" ---------------
nnoremap   [unite]   <Nop>
nmap    <Leader>u [unite]

" ---------------
" vimfiler.vim
" ---------------
nnoremap [vimfiler] <Nop>
nmap <Leader>f [vimfiler]

" ---------------
" undotree.vim
" ---------------
nnoremap <F5> :UndotreeToggle<CR>

" ---------------
" vim-markdown
" ---------------
if dein#tap('vim-markdown.vim') "{{{
  augroup MyMarkdown
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    " mlでlist-item追加
    autocmd FileType markdown nnoremap <buffer> ml <C-u>for i in range(v:count1) \| call append(line('.'), '*') \| endfor<CR>
  augroup END
endif "}}}


" ---------------
" quickrun.vim
" ---------------

" if dein#tap('quickrun.vim') "{{{
"   execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
"         \ 'source ~/dotfiles/vim/plugin/quickrun.vim'

  " quickrun.vim が実行してない場合は<C-c>を呼び出す
  " augroup quickrunSettings
  "   autocmd!
  "   autocmd FileType qf nnoremap <silent><buffer>q :quit<CR>
  " augroup END
  " let g:quickrun_no_default_key_mappings = 1
  " nmap <Leader>r <Plug>(quickrun)
  " nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
" endif "}}}

" ---------------
" neomake
" ---------------
" autocmd! BufWritePost,BufEnter * Neomake

" ---------------
" VimCSS3Syntax
" ---------------
if dein#tap('vim-css3-syntax.vim') "{{{
  augroup VimCSS3Syntax
    autocmd!
    autocmd FileType css setlocal iskeyword+=-
  augroup END
endif "}}}


" ---------------
" Sass-compile
" ---------------
if dein#tap('sass-compile.vim') "{{{
  execute 'autocmd MyAutoCmd User' 'dein#source#'.g:dein#name
        \ 'source ~/dotfiles/vim/plugin/sass-compile.vim'
endif "}}}


" ---------------
" vim-easy-align
" ---------------
if dein#tap('vim-easy-align.vim') "{{{
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
endif "}}}


" ---------------
" vim-jade
" ---------------
" augroup vimJadeSetting
"   autocmd!
"   autocmd BufNewFile,BufRead *.jade  setf jade
"   autocmd BufNew
" augroup END
"
" if dein#tap('vim-jade.vim') "{{{
"   let g:quickrun_config['jade']={'command': 'jade', 'cmdopt': '-P', 'exec': ['%c &o < %s']}
" endif "}}}


" ---------------
" vim-slim
" ---------------
if dein#tap('vim-slim.vim') "{{{
endif "}}}
autocmd BufNewFile,BufRead *.slim set ft=slim

"------------------------------------
" Completion
"------------------------------------
" Emmet
let g:user_emmet_leader_key = '<C-e>'
